import torch
import clip
from openai import OpenAI
from PIL import Image
from sentence_transformers import SentenceTransformer, util
import os
from dotenv import load_dotenv

load_dotenv()
client = OpenAI(api_key=os.getenv('GPT_API_KEY'))

def get_question_prompt(description: str):
    return f"Generate a quiz questions based on these images. It should be a fun interactive quiz that captures the users personality and helps us decide how to filter this large set of images. I want 5 questions with 4 possible answers each"

def get_gpt_agent(prompt: str):
    return [
        {"role": "system", "content": "You are a helpful assistant."},
        {"role": "user", "content": f"Create a multiple-choice quiz question based on this description: {prompt}\nProvide four answer options."}
    ]


class GPT_ImageQuizWrapper:
    def __init__(self, gpt_model):
        """
        Initialize wrapper with GPT model for image quiz generation.
        
        Args:
            gpt_model: The GPT model to generate questions and process answers.
        """
        self.gpt_model = gpt_model
        self.images = []
        self.quiz_questions = []
        
    def add_images(self, image_paths):
        """
        Add images to the quiz wrapper for processing.

        Args:
            image_paths (list): List of image paths.
        """
        self.images = image_paths

    def generate_quiz(self):
        """
        Generate quiz questions based on images.

        Returns:
            list: List of quiz questions generated by GPT based on images.
        """
        for image_path in self.images:
            try:
                # Load image
                with open(image_path, 'rb') as image_file:
                    image = image_file.read()
                
                # Send image to GPT for generating a quiz question
                prompt = self.gpt_model.create_image_prompt(image)
                question = self.gpt_model.generate_question(prompt)
                self.quiz_questions.append(question)
                
            except Exception as e:
                print(f"Error generating quiz for {image_path}: {e}")
        
        return self.quiz_questions


class GPTModel:
    def __init__(self, api_key):
        self.api_key = api_key

    def create_image_prompt(self, image):
        """
        Creates an image prompt to send to GPT for generating quiz questions.

        Args:
            image (bytes): The image bytes to send to GPT.

        Returns:
            str: Response containing the image analysis or description for quiz generation.
        """
        try:
            # Sending image to GPT-4 with vision capabilities
            response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {
                "role": "user",
                "content": [
                    {"type": "text", "text": get_question_prompt()},
                    {
                    "type": "image_url",
                    "image_url": {
                        "url": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg",
                    },
                    },
                ],
                }
            ],
            max_tokens=300,
            )


            # Assuming GPT-4V generates some form of description from the image
            description = response['choices'][0]['text']
            return description
        
        except Exception as e:
            print(f"Error sending image to GPT-4: {e}")
            return "Image processing failed."

    def generate_question(self, prompt):
        """
        Uses GPT to generate a quiz question based on the prompt.

        Args:
            prompt (str): The prompt or description to generate the question from.

        Returns:
            str: Generated quiz question.
        """
        try:
            response = OpenAI.Completion.create(
                model="gpt-4-turbo",
                messages=[{
                    "role": "system", 
                    "content": "You are a helpful assistant."
                }, {
                    "role": "user", 
                    "content": f"Create a multiple-choice quiz question based on this description: {prompt}\nProvide four answer options."
                }],
                max_tokens=100
            )
            return response.choices[0].text.strip()
        
        except Exception as e:
            print(f"Error generating question: {e}")
            return "Question generation failed."


if __name__ == "__main__":
    # Initialize the GPTModel
    gpt_model = GPTModel(api_key=os.getenv('GPT_API_KEY'))

    # Initialize the GPT_ImageQuizWrapper
    quiz_wrapper = GPT_ImageQuizWrapper(gpt_model=gpt_model)

    # Add some image paths
    image_paths = ["./images/image1.jpeg", "./images/image2.jpeg", "./images/image3.jpeg"]
    quiz_wrapper.add_images(image_paths)

    # Generate quiz questions
    questions = quiz_wrapper.generate_quiz()
    print("Quiz Questions:")
    for idx, question in enumerate(questions, 1):
        print(f"{idx}. {question}")

